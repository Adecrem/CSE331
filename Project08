"""
Name: Andrew Decrem
CSE 331 SS20 (Onsay)
"""

#import queue, heapq, math, itertools
import math
import itertools
import queue
import heapq
from collections import OrderedDict
import time
import random
import matplotlib.pyplot as plt, matplotlib.patches as patches, matplotlib.cm as cm
import numpy as np


class Vertex:
    """
    Class representing a Vertex object within a Graph
    """

    __slots__ = ['id', 'adj', 'visited', 'x', 'y']

    def __init__(self, idx, x=0, y=0):
        """
        DO NOT MODIFY
        Initializes a Vertex
        :param idx: A unique string identifier used for hashing the vertex
        :param x: The x coordinate of this vertex (used in a_star)
        :param y: The y coordinate of this vertex (used in a_star)
        """
        self.id = idx
        self.adj = OrderedDict()  # dictionary {id : weight} of outgoing edges
        self.visited = False      # Boolean flag used in search algorithms
        self.x = x
        self.y = y

    def __eq__(self, other):
        """
        DO NOT MODIFY
        Overloads equality operator for Graph Vertex class
        :param other: vertex to compare
        """
        return (self.id == other.id
                and self.adj == other.adj
                and self.visited == other.visited
                and self.x == other.x
                and self.y == other.y)

    def __repr__(self):
        """
        DO NOT MODIFY
        Represents Vertex as string
        :return: string representing Vertex object
        """
        lst = [f"<id: '{k}', weight: {v}>" for k, v in self.adj.items()]

        return f"<id: '{self.id}'" + ", Adjacencies: " + "".join(lst) + ">"

    def __str__(self):
        """
        DO NOT MODIFY
        Represents Vertex as string
        :return: string representing Vertex object
        """
        return repr(self)

    def __hash__(self):
        """
        DO NOT MODIFY
        Hashes Vertex into a set; used in unit tests
        :return: hash value of Vertex
        """
        return hash(self.id)

    def degree(self):
        """
        The amount of edges
        :param self: The graph
        :return: Amount of edges
        """
        return len(self.adj)

    def visit(self):
        """
        Visit flag to True
        :param self: The graph
        :return: None
        """
        self.visited = True

    def reset(self):
        """
        Resets visited flag to False
        :param self: The graph
        :return: None
        """
        self.visited = False

    def get_edges(self):
        """
        The edges
        :param self: The graph
        :return: A list of edges
        """
        return list(self.adj.items())

    def euclidean_distance(self, other):
        """
        Euclidean distance of points
        :param self: The graph
        :param other: Other point
        :return: The euclidean distance between two sets of points
        """
        first = self.x - other.x
        second = self.y - other.y
        firsts = first*first
        seconds = second*second
        final = math.sqrt(firsts + seconds)
        return final


class Graph:
    """
    Class implementing the Graph ADT using an Adjacency Map structure
    """

    __slots__ = ['size', 'vertices', 'plot_show', 'plot_delay']

    def __init__(self, plt_show=False):
        """
        DO NOT MODIFY
        Instantiates a Graph class instance
        :param: plt_show : if true, render plot when plot() is called; else, ignore calls to plot()
        """
        self.size = 0
        self.vertices = OrderedDict()
        self.plot_show = plt_show
        self.plot_delay = 0.2

    def __eq__(self, other):
        """
        DO NOT MODIFY
        Overloads equality operator for Graph class
        :param other: graph to compare
        """
        return self.vertices == other.vertices and self.size == other.size

    def __repr__(self):
        """
        DO NOT MODIFY
        :return: String representation of graph for debugging
        """
        return "Size: " + str(self.size) + ", Vertices: " + str(list(self.vertices.items()))

    def __str__(self):
        """
        DO NOT MODFIY
        :return: String representation of graph for debugging
        """
        return repr(self)

    def plot(self):
        """
        Modify if you'd like - use for debugging!
        :return: Plot a visual representation of the graph using matplotlib
        """
        if self.plot_show:
            # seed random generator to reproduce random placements if no x,y specified
            random.seed(2020)

            # show edges
            max_weight = max([edge[2] for edge in self.get_edges()])
            colormap = cm.get_cmap('cool')
            for edge in self.get_edges():
                origin = self.get_vertex(edge[0])
                destination = self.get_vertex(edge[1])
                weight = edge[2]

                # if no x, y coords are specified, randomly place in (0,1)x(0,1)
                if not origin.x and not origin.y:
                    origin.x, origin.y = random.random(), random.random()
                if not destination.x and not destination.y:
                    destination.x, destination.y = random.random(), random.random()

                # plot edge
                arrow = patches.FancyArrowPatch((origin.x, origin.y), (destination.x, destination.y),
                                                connectionstyle="arc3,rad=.2", color=colormap(weight / max_weight),
                                                zorder=0,
                                                **dict(arrowstyle="Simple,tail_width=0.5,head_width=8,head_length=8"))
                plt.gca().add_patch(arrow)

                # label edge
                plt.text((origin.x + destination.x) / 2 - (origin.x - destination.x) / 10,
                         (origin.y + destination.y) / 2 - (origin.y - destination.y) / 10,
                         weight, color=colormap(weight / max_weight))

            # show vertices
            x = np.array([vertex.x for vertex in self.get_vertices()])
            y = np.array([vertex.y for vertex in self.get_vertices()])
            labels = np.array([vertex.id for vertex in self.get_vertices()])
            colors = np.array(['yellow' if vertex.visited else 'black' for vertex in self.get_vertices()])
            plt.scatter(x, y, s=40, c=colors, zorder=1)

            # plot labels
            for i in range(len(x)):
                plt.text(x[i] - 0.03 * max(x), y[i] - 0.03 * max(y), labels[i])

            # show plot
            plt.show()
            # delay execution to enable animation
            time.sleep(self.plot_delay)

    def reset_vertices(self):
        """
        Resets the vertices
        :param self: The graph
        :return: None
        Resets vertices flag to false
        """
        for vertex in self.vertices.values():
            vertex.reset()

    def get_vertex(self, vertex_id):
        """
        returns the vertices with that ID
        :param self: The graph
        :param vertex_id: Vertex id
        :return: Vertices with id
        """
        return self.vertices.get(vertex_id)

    def get_vertices(self):
        """
        Get list of vertices
        :param self: The graph
        :return: List of vertices
        """
        return list(self.vertices.values())

    def get_edge(self, start_id, dest_id):
        """
        Get edge between two id's
        :param self: The graph
        :param start_id: The start id
        :param dest_id: The destination id
        :return: Tuple of start dest and weight
        """
        if start_id is None or dest_id is None or self.vertices is None:
            return None
        start = self.vertices.get(start_id)
        end = self.vertices.get(dest_id)
        if start is None or end is None:
            return None
        for key, value in self.vertices.items():
            if key != start_id:
                return None
            for key2, value2 in value.adj.items():
                return tuple([key, key2, value2])

    def get_edges(self):
        """
        List of all the edges
        :param self: The graph
        :return: List of all the edges
        """
        lst = []
        for i in self.vertices.items():
            dct = i[1].adj
            if not bool(dct) == False:
                tupl = dct.popitem()
                lst.append((tuple([i[0], tupl[0], tupl[1]])))
        return lst

    # def add_to_graph(self, start_id, dest_id=None, weight=0):
    #     pass
    #
    # def construct_from_matrix(self, matrix):
    #     pass
    #
    # def construct_from_csv(self, csv):
    #     pass
    #
    # def construct_matrix_from_graph(self):
    #     pass
    #
    # def bfs(self, start_id, target_id):
    #     pass
    #
    #
    # def dfs(self, start_id, target_id):
    #     pass
    #
    # def _dfs_recursive(self, current_id, target_id, path=[], dist=0):
    #     pass
    #
    # def a_star(self, start_id, target_id):
    #     pass
    #
    # def make_equivalence_relation(self):
    #     pass


class AStarPriorityQueue:
    """
    Priority Queue built upon heapq module with support for priority key updates
    Created by Andrew McDonald
    Inspired by https://docs.python.org/2/library/heapq.html
    """

    __slots__ = ['__data', '__locator', '__counter']

    def __init__(self):
        """
        Construct an AStarPriorityQueue object
        """
        self.__data = []                        # underlying data list of priority queue
        self.__locator = {}                     # dictionary to locate vertices within priority queue
        self.__counter = itertools.count()      # used to break ties in prioritization

    def __repr__(self):
        """
        Represent AStarPriorityQueue as a string
        :return: string representation of AStarPriorityQueue object
        """
        lst = [f"[{priority}, {vertex}], " if vertex is not None else "" for priority,
              count, vertex in self.__data]
        return "".join(lst)[:-1]

    def __str__(self):
        """
        Represent AStarPriorityQueue as a string
        :return: string representation of AStarPriorityQueue object
        """
        return repr(self)

    def empty(self):
        """
        Determine whether priority queue is empty
        :return: True if queue is empty, else false
        """
        return len(self.__data) == 0

    def push(self, priority, vertex):
        """
        Push a vertex onto the priority queue with a given priority
        :param priority: priority key upon which to order vertex
        :param vertex: Vertex object to be stored in the priority queue
        :return: None
        """
        count = next(self.__counter)
        # list is stored by reference, so updating will update all refs
        node = [priority, count, vertex]
        self.__locator[vertex.id] = node
        heapq.heappush(self.__data, node)

    def pop(self):
        """
        Remove and return the (priority, vertex) tuple with lowest priority key
        :return: (priority, vertex) tuple where priority is key,
        and vertex is Vertex object stored in priority queue
        """
        vertex = None
        while vertex is None:
            # keep popping until we have valid entry
            priority, count, vertex = heapq.heappop(self.__data)
        del self.__locator[vertex.id]                   # remove from locator dict
        vertex.visit()                  # indicate that this vertex was visited
        return priority, vertex

    def update(self, new_priority, vertex):
        """
        Update given Vertex object in the priority queue to have new priority
        :param new_priority: new priority on which to order vertex
        :param vertex: Vertex object for which priority is to be updated
        :return: None
        """
        node = self.__locator.pop(vertex.id)    # delete from dictionary
        node[-1] = None                         # invalidate old node
        self.push(new_priority, vertex)         # push new node
