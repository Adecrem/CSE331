class DLLError(Exception):
    """
    Class representing an error related to the DLL class implemented below.
    """
    pass

class DLLNode:
    """
    Class representing a node in the doubly linked list implemented below.
    """

    def __init__(self, value, next=None, prev=None):
        """
        Constructor
        @attribute value: the value to give this node
        @attribute next: the next node for this node
        @attribute prev: the previous node for this node
        """
        self.next = next
        self.prev = prev
        self.value = value

    def __repr__(self):
        return str(self.value)

    def __str__(self):
        return str(self.value)

class DLL:
    """
    Class representing a doubly linked list.
    """
    def __init__(self):
        """
        Constructor
        @attribute head: the head of the linked list
        @attribute tail: the tail of the linked list
        @attribute size: the size of the linked list
        """
        self.head = None
        self.tail = None
        self.size = 0

    def __repr__(self):
        """
        iterates through the linked list to generate a string representation
        :return: string representation of the linked list
        """
        res = ""
        node = self.head
        while node:
            res += str(node)
            if node.next:
                res += " "
            node = node.next
        return res

    def __str__(self):
        """
        iterates through the linked list to generate a string representation
        :return: string representation of the linked list
        """
        res = ""
        node = self.head
        while node:
            res += str(node)
            if node.next:
                res += " "
            node = node.next
        return res

    ######### MODIFY BELOW ##########

    def is_empty(self):
        """
        Determines if the linked list is empty or not
        :return: [boolean] true if DLL is empty, false otherwise
        """
        return self.size <= 0

    def insert_front(self, value):
        """
        Inserts a value into the front of the list
        :param value: the value to insert
        """
        node = DLLNode(value)
        if self.head is not None:
            node.next = self.head
            self.head.prev = node
            self.head = node
            self.size += 1
        elif self.head is None:
            self.head = node
            self.tail = node
            self.size += 1
    def insert_back(self, value):
        """
        Inserts a value into the back of the list
        :param value: the value to insert
        """
        node = DLLNode(value)
        if self.tail is not None:
            self.tail.next = node
            node.prev = self.tail
            self.tail = node
            self.size += 1
        elif self.tail is None:
            self.tail = node
            self.head = node
            self.size += 1

    def delete_front(self):
        """
        Deletes the front node of the list
        """
        if self.is_empty():
            self.head = None
            self.tail = None
            raise DLLError
        elif (self.size == 1):
            self.head = None
            self.tail = None
            self.size = 0
        else:
            self.head = self.head.next
            self.head.prev = None
            self.size -= 1

    def delete_back(self):
        """
        Deletes the back node of the list
        """
        if self.is_empty():
            self.head = None
            self.tail = None
            raise DLLError
        elif (self.size == 1):
            self.head = None
            self.tail = None
            self.size = 0
        else:
            self.tail = self.tail.prev
            self.tail.next = None
            self.size -= 1

    def delete_value(self, value):
        """
        Deletes the first instance of the value in the list.
        :param value: The value to remove
        """
        if self.is_empty():
            raise DLLError
        node = self.head
        while node is not None:
            if (node.value == value):
                if self.size == 1:
                    self.head = None
                    self.tail = None
                    self.size = 0
                    return
                elif node.next is None and self.size > 1:
                    self.tail = self.tail.prev
                    self.tail.next = None
                    self.size -= 1
                    return
                elif node.prev is None and self.size > 1:
                    self.head = self.head.next
                    self.head.prev = None
                    self.size -= 1
                    return
                else:
                    tmp = node.next
                    node.prev.next = tmp
                    tmp.prev = node.prev
                    self.size -= 1
                    return
            node = node.next
        raise DLLError

    def delete_all(self, value):
        """
        Deletes all instances of the value in the list
        :param value: the value to remove
        """
        lst = self.find_all(value)
        curlst = []
        if self.is_empty():
            raise DLLError
        node = self.head

        while node is not None:
            if (node.value == value):
                if self.size == 1:
                    self.head = None
                    self.tail = None
                    self.size = 0
                    curlst.append(node)
                elif node.next is None and self.size > 1:
                    self.tail = self.tail.prev
                    self.tail.next = None
                    self.size -= 1
                    curlst.append(node)
                elif node.prev is None and self.size > 1:
                    self.head = self.head.next
                    self.head.prev = None
                    self.size -= 1
                    curlst.append(node)
                else:
                    tmp = node.next
                    node.prev.next = tmp
                    tmp.prev = node.prev
                    self.size -= 1
                    curlst.append(node)
            if lst == curlst:
                return
            else:
                node = node.next
        raise DLLError


    def find_first(self, value):
        """
        Finds the first instance of the value in the list
        :param value: the value to find
        :return: [DLLNode] the first node containing the value
        """
        node = self.head
        while node is not None:
            if node.value == value:
                return node
            node = node.next
        raise DLLError

    def find_last(self, value):
        """
        Finds the last instance of the value in the list
        :param value: the value to find
        :return: [DLLNode] the last node containing the value
        """
        if self.is_empty():
            raise DLLError
        lst = []
        node = self.head
        while node is not None:
            if node.value == value:
                lst.append(node)
            node = node.next
        if len(lst) > 0:
            return lst[-1]
        else:
            raise DLLError

    def find_all(self, value):
        """
        Finds all of the instances of the value in the list
        :param value: the value to find
        :return: [List] a list of the nodes containing the value
        """
        if self.is_empty():
            raise DLLError
        lst = []
        node = self.head
        while node is not None:
            if node.value == value:
                lst.append(node)
            node = node.next
        if len(lst) > 0:
            return lst
        else:
            raise DLLError

    def count(self, value):
        """
        Finds the count of times that the value occurs in the list
        :param value: the value to count
        :return: [int] the count of nodes that contain the given value
        """
        node = self.head
        count = 0
        if self.is_empty():
            return 0
        if self.size == 1:
            return 1
        while node is not None:
            if node.value == value:
                count += 1
            node = node.next
        return count

    def sum(self):
        """
        Finds the sum of all nodes in the list
        :param start: the indicator of the contents of the list
        :return: the sum of all items in the list
        """
        if self.is_empty():
            return None
        if self.size == 1:
            return self.head.value
        node = self.head
        total = node.value
        while node.next is not None:
            total = total + node.next.value
            node = node.next
        return total

def reverse(LL):
    """
    Reverses a linked list in place
    :param LL: The linked list to reverse
    """
    if LL.is_empty():
        return
    tmp = LL.head
    LL.head = LL.tail
    LL.tail = tmp
    node = LL.head

    while node is not None:
        tmp = node.next
        node.next = node.prev
        node.prev = tmp
        node = node.next



