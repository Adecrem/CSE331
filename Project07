"""
Implemented by: Yash Vesikar and Brandon Field
"""


class HashNode:
    """
    DO NOT EDIT
    """
    __slots__ = ["key", "value", "deleted"]

    def __init__(self, key, value, deleted=False):
        self.key = key
        self.value = value
        self.deleted = deleted

    def __repr__(self):
        return f"HashNode({self.key}, {self.value})"

    def __eq__(self, other):
        return self.key == other.key and self.value == other.value

    def __iadd__(self, other):
        self.value += other


class HashTable:
    """
    Hash Table Class
    """
    __slots__ = ['capacity', 'size', 'table', 'prime_index']

    primes = (
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
        89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
        181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
        281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,
        397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
        503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,
        619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,
        743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,
        863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
        997)

    def __init__(self, capacity=8):
        """
        DO NOT EDIT
        Initializes hash table
        :param capacity: capacity of the hash table
        """
        self.capacity = capacity
        self.size = 0
        self.table = [None] * capacity

        i = 0
        while HashTable.primes[i] <= self.capacity:
            i += 1
        self.prime_index = i - 1

    def __eq__(self, other):
        """
        DO NOT EDIT
        Equality operator
        :param other: other hash table we are comparing with this one
        :return: bool if equal or not
        """
        if self.capacity != other.capacity or self.size != other.size:
            return False
        for i in range(self.capacity):
            if self.table[i] != other.table[i]:
                return False
        return True

    def __repr__(self):
        """
        DO NOT EDIT
        Represents the table as a string
        :return: string representation of the hash table
        """
        represent = ""
        bin_no = 0
        for item in self.table:
            represent += "[" + str(bin_no) + "]: " + str(item) + '\n'
            bin_no += 1
        return represent

    def _hash_1(self, key):
        """
        ---DO NOT EDIT---
        Converts a string x into a bin number for our hash table
        :param key: key to be hashed
        :return: bin number to insert hash item at in our table, None if key is an empty string
        """
        if not key:
            return None
        hashed_value = 0

        for char in key:
            hashed_value = 181 * hashed_value + ord(char)
        return hashed_value % self.capacity

    def _hash_2(self, key):
        """
        ---DO NOT EDIT---
        Converts a string x into a hash
        :param x: key to be hashed
        :return: a hashed value
        """
        if not key:
            return None
        hashed_value = 0

        for char in key:
            hashed_value = 181 * hashed_value + ord(char)

        prime = HashTable.primes[self.prime_index]

        hashed_value = prime - (hashed_value % prime)
        if hashed_value % 2 == 0:
            hashed_value += 1
        return hashed_value

    def __len__(self):
        """
        don't edit this plz
        Getter for size
        :return: size
        """
        return self.size

    ########## EDIT BELOW ##########

    def __setitem__(self, key, value):
        """
        Sets item
        :param self: The list
        :param key: Key to insert
        :param value: value to insert
        :return: None
        Inserts a HashNode
        """
        return self._insert(key, value)

    def __getitem__(self, key):
        """
        Gets item
        :param self: The list
        :param key: Key to get
        :return: None
        Gets a Hashnode
        """
        return self._get(key)

    def __delitem__(self, key):
        """
        Delete's an item
        :param self: The list
        :param key: Key to get
        :return: None
        Delete's an item
        """
        return self._delete(key)

    def __contains__(self, key):
        """
        Check if contains
        :param self: The list
        :param key: Key to get
        :return: Bool
        Checks if a key is in a list
        """
        if self._get(key) is None:
            return False
        return True

    def hash(self, key, inserting=False):
        """
        Hash's a list
        :param self: The list
        :param key: Key to hash
        :param inserting: boolean value whether inserting or not
        :return: The index
        Hash's a node based on whether inserting is true or not
        """
        h1 = self._hash_1(key)
        hasher = h1
        step = self._hash_2(key)
        iter = 1

        if inserting is False:
            while self.table[hasher] is not None:
                if self.table[hasher].key == key:
                    return hasher
                hasher = (h1 + iter * step) % self.capacity
                iter += 1
        elif inserting is True:
            while self.table[hasher] is not None and self.table[hasher].deleted is False:
                if self.table[hasher].key == key:
                    return hasher
                hasher = (h1 + iter * step) % self.capacity
                iter += 1
        return hasher


    def _insert(self, key, value):
        """
        Insert's a node and grows accordingly
        :param self: The list
        :param key: Key to insert
        :param value: value to insert
        :return: None
        Inserts a hashnode
        """
        node = HashNode(key, value)
        self.table[self.hash(key)] = node
        self.size += 1
        if self.size >= (self.capacity*.5):
            self._grow()

    def _get(self, key):
        """
        Gets item
        :param self: The list
        :param key: Key to get
        :return: Found node if found
        Gets a Hashnode
        """
        if key == None:
            return None
        return self.table[self.hash(key)]

    def _delete(self, key):
        """
        Delete's a node if found
        :param self: The list
        :param key: Key to get
        :return: None
        Resets things based on if found
        """
        if self.table[self.hash(key)].key == key:
            self.size -= 1
            self.table[self.hash(key)].key = None
            self.table[self.hash(key)].value = None
            self.table[self.hash(key)].deleted = True

    def _grow(self):
        """
        Grow
        :param self: The list
        :return: None
       Grows a HashTable by two
        """
        new_hash = HashTable(self.capacity * 2)
        for node in self.table:
            if node is None or node.deleted is True:
                continue
            new_hash._insert(node.key, node.value)
        self.prime_index = new_hash.prime_index
        self.size = new_hash.size
        self.capacity = self.capacity*2
        self.table = new_hash.table

    # def update(self, pairs=[]):
    #     pass
    #
    #
    # def setdefault(self, key, default=None):
    #     pass

    def keys(self):
        """
        Generator of list of keys
        :param self: The list
        A generator of the keys
        (Doesn't seem to be working, but this is what I feel would fit)
        """
        for item in self.table:
            yield item.key

    def values(self):
        """
        Generator of list of values
        :param self: The list
        A generator of the values
        (Doesn't seem to be working, but this is what I feel would fit)
        """
        for item in self.table:
            yield item.value

    def items(self):
        """
        Generator of list of items
        :param self: The list
        A generator of the items
        (Doesn't seem to be working, but this is what I feel would fit)
        """
        for item in self.table:
            yield item

    def clear(self):
        """
        Clears a table
        :param self: The list
        :return: None
        Clears a table, but doesn't reset capacity
        """
        self.table = [None] * self.capacity
        self.size = 0

# def hurdles(grid):
#     pass

# def main():
#     table = HashTable(capacity=16)
#     table.table = [None, None, None,
#                    HashNode('class_ever', 1), HashNode(None, None, True),
#                    HashNode(None, None, True), None, None, None,
#                    None, HashNode(None, None, True), None,
#                    None, None, HashNode('cse331', 100), None]
#     # Should insert in the first available bin
#     print(4 == table.hash("is_the", inserting=True))
#     # Should search until the first None/unused bin
#     print(15 == table.hash("is_the"))
#     # Should insert in the first available bin
#     print(5 == table.hash("yash", inserting=True))
#     # Should search until the first None/unused bin
#     print(7 == table.hash("yash"))
#     print(3 == table.hash("class_ever"))
# if __name__ == "__main__":
#     main()
